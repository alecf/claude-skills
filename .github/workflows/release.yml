name: Build and Release Plugins

on:
  push:
    branches:
      - main
    paths:
      - 'plugins/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-plugins: ${{ steps.changed.outputs.plugins }}
      has-changes: ${{ steps.changed.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed plugins
        id: changed
        run: |
          # Get list of changed files in plugins directory
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD -- plugins/ || echo "")

          if [ -z "$CHANGED_FILES" ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "plugins=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Extract unique plugin names
          PLUGINS=$(echo "$CHANGED_FILES" | grep '^plugins/' | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')

          echo "Changed plugins: $PLUGINS"
          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "plugins=$PLUGINS" >> $GITHUB_OUTPUT

  build-and-release:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.detect-changes.outputs.changed-plugins) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Build plugin
        run: |
          chmod +x scripts/build.sh
          ./scripts/build.sh ${{ matrix.plugin }}

      - name: Get plugin version
        id: version
        run: |
          VERSION=$(jq -r '.version' plugins/${{ matrix.plugin }}/.claude-plugin/plugin.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building ${{ matrix.plugin }} v$VERSION"

      - name: Check if release exists
        id: check-release
        run: |
          RELEASE_TAG="${{ matrix.plugin }}-v${{ steps.version.outputs.version }}"
          if gh release view "$RELEASE_TAG" &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release $RELEASE_TAG already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release $RELEASE_TAG does not exist"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create GitHub Release
        if: steps.check-release.outputs.exists == 'false'
        run: |
          PLUGIN_NAME="${{ matrix.plugin }}"
          VERSION="${{ steps.version.outputs.version }}"
          RELEASE_TAG="${PLUGIN_NAME}-v${VERSION}"

          # Get description from plugin.json
          DESCRIPTION=$(jq -r '.description' plugins/$PLUGIN_NAME/.claude-plugin/plugin.json)

          # Create release notes
          cat > release-notes.md << EOF
          # $PLUGIN_NAME v$VERSION

          $DESCRIPTION

          ## Installation

          ### Claude Code (Multiple Options)

          **Option 1: Via Marketplace (Recommended)**
          \`\`\`
          /plugin marketplace add alecf/claude-skills
          /plugin install $PLUGIN_NAME@alecf-claude-skills
          \`\`\`

          **Option 2: Manual Plugin Installation**
          1. Download \`${PLUGIN_NAME}-plugin-v${VERSION}.zip\`
          2. Extract to \`~/.claude/plugins/\`
          3. Restart Claude Desktop

          **Option 3: Manual Skill Installation**
          1. Download \`${PLUGIN_NAME}-skill-v${VERSION}.zip\`
          2. Extract to \`~/.claude/skills/\`
          3. Restart Claude Desktop

          ### Claude Desktop

          1. Download \`${PLUGIN_NAME}-skill-v${VERSION}.zip\`
          2. Extract to \`~/.claude/skills/\`
          3. Restart Claude Desktop

          ## Files

          - \`${PLUGIN_NAME}-plugin-*.zip\` - Full plugin (for Claude Code marketplace or manual plugin installation)
          - \`${PLUGIN_NAME}-skill-*.zip\` - Skill only (for Claude Desktop or manual skill installation)

          ## Changelog

          See commit history for details.
          EOF

          # Create release with both plugin and skill zips
          gh release create "$RELEASE_TAG" \
            --title "$PLUGIN_NAME v$VERSION" \
            --notes-file release-notes.md \
            dist/$PLUGIN_NAME/${PLUGIN_NAME}-plugin-v${VERSION}.zip \
            dist/$PLUGIN_NAME/${PLUGIN_NAME}-plugin-latest.zip \
            dist/$PLUGIN_NAME/${PLUGIN_NAME}-skill-v${VERSION}.zip \
            dist/$PLUGIN_NAME/${PLUGIN_NAME}-skill-latest.zip
        env:
          GH_TOKEN: ${{ github.token }}
